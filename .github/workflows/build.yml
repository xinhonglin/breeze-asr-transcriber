name: Build Cross-Platform Executables

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS Apple Silicon (ARM64)
          - os: macos-14
            python-version: '3.11'
            artifact_name: BreezASR-macOS-ARM64
            arch: arm64
            
          # Windows x64
          - os: windows-latest
            python-version: '3.11'
            artifact_name: BreezASR-Windows
            arch: x64

    runs-on: ${{ matrix.os }}
    name: Build for ${{ matrix.artifact_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          version: "latest"
          python-version: ${{ matrix.python-version }}
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync
          uv pip install pyinstaller

      - name: Verify installation
        run: |
          uv run python -c "import torch, transformers, customtkinter; print('All dependencies installed successfully')"

      # ===== macOS 構建 =====
      - name: Build macOS .app bundle
        if: runner.os == 'macOS'
        run: |
          uv run pyinstaller BreezASR.spec

      - name: Verify macOS build
        if: runner.os == 'macOS'
        run: |
          echo "=== 列出所有打包檔案 ==="
          find dist/BreezASR.app -type f -name "*.py" -o -name "BreezASR" | head -20
          
          echo ""
          echo "=== 驗證關鍵檔案 ==="
          
          # 驗證 .app bundle
          if [ ! -d "dist/BreezASR.app" ]; then
            echo "Error: BreezASR.app not found!"
            exit 1
          fi
          echo "✓ BreezASR.app found"
          
          # 驗證執行檔
          if [ ! -f "dist/BreezASR.app/Contents/MacOS/BreezASR" ]; then
            echo "Error: BreezASR executable not found!"
            exit 1
          fi
          echo "✓ BreezASR executable found"
          
          # 驗證 transcribe 模組（可能在多個位置）
          if find dist/BreezASR.app -name "transcribe.py" -o -name "transcribe.pyc" | grep -q .; then
            echo "✓ transcribe module found:"
            find dist/BreezASR.app -name "transcribe.py" -o -name "transcribe.pyc"
          else
            echo "Error: transcribe module not found!"
            exit 1
          fi
          
          echo ""
          du -sh dist/BreezASR.app

      - name: Package macOS app
        if: runner.os == 'macOS'
        run: |
          cd dist
          zip -r -y "../BreezASR-${{ matrix.artifact_name }}.zip" BreezASR.app
          cd ..
          ls -lh BreezASR-*.zip

      # ===== Windows 構建 =====
      - name: Build Windows executable
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # 使用統一的 .spec 檔案打包（支援跨平台）
          uv run pyinstaller BreezASR.spec

      - name: Verify Windows build
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Output "=== 列出所有打包檔案 ==="
          Get-ChildItem dist\ -Recurse | Select-Object FullName, Length | Format-Table -AutoSize
          
          Write-Output "`n=== 驗證關鍵檔案 ==="
          
          # 驗證執行檔
          if (-not (Test-Path "dist\BreezASR\BreezASR.exe")) {
            Write-Error "BreezASR.exe not found!"
            exit 1
          }
          Write-Output "✓ BreezASR.exe found"
          
          # 驗證 transcribe 模組（可能是 .py 或 .pyc）
          Write-Output "`n搜尋 transcribe 模組..."
          $transcribeFiles = Get-ChildItem -Path "dist\BreezASR" -Recurse -Filter "transcribe.*" -ErrorAction SilentlyContinue
          
          if ($transcribeFiles) {
            Write-Output "✓ transcribe 模組已打包:"
            $transcribeFiles | ForEach-Object { Write-Output "  - $($_.FullName)" }
          } else {
            Write-Error "transcribe 模組未找到！"
            Write-Output "`n嘗試搜尋所有 Python 檔案..."
            Get-ChildItem -Path "dist\BreezASR" -Recurse -Include "*.py","*.pyc" | Select-Object FullName
            exit 1
          }

      - name: Package Windows app
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Compress-Archive -Path dist\BreezASR -DestinationPath "BreezASR-${{ matrix.artifact_name }}.zip" -CompressionLevel Optimal
          Get-Item *.zip

      # ===== 上傳產物 =====
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: BreezASR-${{ matrix.artifact_name }}.zip
          retention-days: 30
          compression-level: 0

      # ===== 發布 Release =====
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: BreezASR-${{ matrix.artifact_name }}.zip
          draft: false
          prerelease: false
          body: |
            # Breez ASR Transcriber ${{ github.ref_name }}
            
            ## Download Instructions
            
            - **macOS (Apple Silicon)**: For M1/M2/M3/M4 Macs
            - **Windows**: For Windows 10/11 (64-bit)
            
            ## Installation Steps
            
            ### macOS
            1. Download the appropriate `.zip` file
            2. Extract and drag `BreezASR.app` to Applications folder
            3. Right-click and select "Open" on first launch (bypass Gatekeeper)
            4. First run will download language models (~1.5GB, takes a few minutes)
            
            ### Windows
            1. Download the Windows `.zip` file
            2. Extract to any location
            3. Run `BreezASR.exe` inside the BreezASR folder
            4. First run will download language models (~1.5GB, takes a few minutes)
            
            ## System Requirements
            
            - **macOS**: 12 Monterey or later
            - **Windows**: 10/11 (64-bit)
            - **RAM**: At least 4GB (8GB recommended)
            - **Storage**: At least 3GB (for model cache)
            
            ## Known Issues
            
            - macOS first launch may be slow (model loading)
            - Windows Defender may flag as false positive (add to whitelist)
            
            ---
            
            Full documentation: [README.md](https://github.com/${{ github.repository }})
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build success
        shell: bash
        run: echo "Build completed successfully for ${{ matrix.artifact_name }}"